//Author Name: Mitchell Gossman
//Date: 08/10/25
//Course ID: 15986-M01 Software Test, Automation
//Description: This class creates appointments and sets/gets appointment info

package appointmentService;

import java.util.Date;
import java.util.Objects;


public class Appointment {

	 private final String appointmentId;
	    private Date appointmentDate;
	    private String description;

	    // Constructor
	    public Appointment(String appointmentId, Date appointmentDate, String description) {
	        if (appointmentId == null || appointmentId.length() > 10) {
	            throw new IllegalArgumentException("Invalid Appointment ID");
	        }
	        if (appointmentDate == null || appointmentDate.before(new Date())) {
	            throw new IllegalArgumentException("Appointment date cannot be null or in the past");
	        }
	        if (description == null || description.length() > 50) {
	            throw new IllegalArgumentException("Invalid description");
	        }
	        this.appointmentId = appointmentId;
	        this.appointmentDate = appointmentDate;
	        this.description = description;
	    }

	    // Getters
	    public String getAppointmentId() {
	        return appointmentId;
	    }

	    public Date getAppointmentDate() {
	        return appointmentDate;
	    }

	    public String getDescription() {
	        return description;
	    }

	    // Setters
	    public void setAppointmentDate(Date appointmentDate) {
	        if (appointmentDate == null || appointmentDate.before(new Date())) {
	            throw new IllegalArgumentException("Appointment date cannot be null or in the past");
	        }
	        this.appointmentDate = appointmentDate;
	    }

	    public void setDescription(String description) {
	        if (description == null || description.length() > 50) {
	            throw new IllegalArgumentException("Invalid description");
	        }
	        this.description = description;
	    }

	    @Override
	    public boolean equals(Object o) {
	        if (this == o) return true;
	        if (!(o instanceof Appointment)) return false;
	        Appointment that = (Appointment) o;
	        return appointmentId.equals(that.appointmentId);
	    }

	    @Override
	    public int hashCode() {
	        return Objects.hash(appointmentId);
	    }
	
}
